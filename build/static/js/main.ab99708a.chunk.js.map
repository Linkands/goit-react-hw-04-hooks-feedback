{"version":3,"sources":["components/Feedback/Feedback.styles.jsx","components/Feedback/Feedback.jsx","components/Statistics/Statistics.styles.jsx","components/Statistics/Statistics.jsx","components/Section/Section.styles.jsx","components/Section/Section.jsx","components/Notification/Notification.styles.jsx","components/Notification/Notification.jsx","App.jsx","index.js"],"names":["Button","styled","div","p","button","Feedback","increaseGoodFeedback","increaseNeutralFeedback","increaseBadFeedback","onClick","StatisticsList","ul","StatisticsItem","li","Statistics","good","neutral","bad","total","positivePercentage","Title","Wrapper","Section","title","children","Text","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","totalFeedback","percentage","Math","round","countPositiveFeedbackPercentage","className","s","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPASaA,GAPUC,IAAOC,IAAV,kEAISD,IAAOE,EAAV,gDAGJF,IAAOG,OAAV,wI,OCNNC,EAAW,SAAC,GAIlB,IAHLC,EAGI,EAHJA,qBACAC,EAEI,EAFJA,wBACAC,EACI,EADJA,oBAEA,OACE,gCACE,cAACR,EAAD,CAAQS,QAAS,kBAAMH,KAAvB,kBACA,cAACN,EAAD,CAAQS,QAAS,kBAAMF,KAAvB,qBACA,cAACP,EAAD,CAAQS,QAAS,kBAAMD,KAAvB,qBCFOE,EAAiBT,IAAOU,GAAV,6CAGdC,EAAiBX,IAAOY,GAAV,4JCWZC,I,IAAAA,EApBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,eAACT,EAAD,WACE,eAACE,EAAD,oBAAuBG,KACvB,eAACH,EAAD,uBAA0BI,KAC1B,eAACJ,EAAD,mBAAsBK,KACtB,eAACL,EAAD,qBAAwBM,KACxB,eAACN,EAAD,gCAAmCO,EAAnC,WCTOC,EAAQnB,IAAOE,EAAV,gDAGLkB,EAAUpB,IAAOC,IAAV,kECaLoB,I,EAAAA,EAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,eAAC,EAAD,WACE,cAACJ,EAAD,UAAQG,IACPC,MCNMC,EAAOxB,IAAOE,EAAV,0BCSFuB,MAPf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,cAACF,EAAD,UAAOE,KC2DDC,MA1Df,WACE,MAAwBC,mBAAS,GAAjC,mBAAOd,EAAP,KAAae,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOb,EAAP,KAAgBe,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOZ,EAAP,KAAYe,EAAZ,KAEA,SAASC,IAEP,OADsBlB,EAAOC,EAAUC,EAUzC,IAYMC,EAAQe,IACRd,EAnBN,WACE,IAAMe,EAAgBD,IAChBE,EAAqB,IAAPpB,EAAcmB,EAClC,OAAOE,KAAKC,MAAMF,GAgBOG,GAE3B,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,CAAShB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEjB,qBAnBqB,WAC3BwB,GAAQ,SAACU,GAAD,OAAOA,EAAI,MAmBbjC,wBAhBwB,WAC9BwB,GAAW,SAACS,GAAD,OAAOA,EAAI,MAgBhBhC,oBAboB,WAC1BwB,GAAO,SAACQ,GAAD,OAAOA,EAAI,UAgBhB,cAAC,EAAD,CAASjB,MAAM,aAAf,SACGL,EACC,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAGtB,cAAC,EAAD,CAAcQ,QAAQ,4BCpDhCc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ab99708a.chunk.js","sourcesContent":["import styled from '@emotion/styled'\n\nexport const Wrapper = styled.div`\n  padding: 5px;\n  max-width: 500px;\n`\nexport const ButtonsHeader = styled.p`\n  font-size: 30px;\n`\nexport const Button = styled.button`\n  background-color: tomato;\n  border-radius: 3px;\n  padding: 10px;\n  margin: 10px;\n  cursor: pointer;\n`\n","import React from 'react'\nimport { Button } from './Feedback.styles'\n\nexport const Feedback = ({\n  increaseGoodFeedback,\n  increaseNeutralFeedback,\n  increaseBadFeedback,\n}) => {\n  return (\n    <div>\n      <Button onClick={() => increaseGoodFeedback()}>Good</Button>\n      <Button onClick={() => increaseNeutralFeedback()}>Neutral</Button>\n      <Button onClick={() => increaseBadFeedback()}>Bad</Button>\n    </div>\n  )\n}\n","import styled from '@emotion/styled'\n\n// export const Wrapper = styled.div`\n//   padding: 5px;\n//   max-width: 500px;\n// `\n// export const StatisticsHeader = styled.p`\n//   font-size: 30px;\n// `\n\nexport const StatisticsList = styled.ul`\n  padding: 0px;\n`\nexport const StatisticsItem = styled.li`\n  list-style: none;\n  background-color: tomato;\n  border-radius: 3px;\n  padding: 10px;\n  margin: 10px;\n  cursor: pointer;\n`\n","import React from 'react'\nimport { StatisticsList, StatisticsItem } from './Statistics.styles'\nimport PropTypes from 'prop-types'\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <StatisticsList>\n      <StatisticsItem>Good: {good}</StatisticsItem>\n      <StatisticsItem>Neutral: {neutral}</StatisticsItem>\n      <StatisticsItem>Bad: {bad}</StatisticsItem>\n      <StatisticsItem>Total: {total}</StatisticsItem>\n      <StatisticsItem>Positive feedback:{positivePercentage}%</StatisticsItem>\n    </StatisticsList>\n  )\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n}\n\nexport default Statistics","import styled from '@emotion/styled'\n\nexport const Title = styled.p`\n  font-size: 30px;\n`\nexport const Wrapper = styled.div`\n  padding: 5px;\n  max-width: 500px;\n`\n","import React from 'react'\nimport { Title, Wrapper } from './Section.styles'\nimport PropTypes from 'prop-types'\n\nfunction Section({ title, children }) {\n  return (\n    <Wrapper>\n      <Title>{title}</Title>\n      {children}\n    </Wrapper>\n  )\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n}\n\nexport default Section\n","import styled from '@emotion/styled'\n\nexport const Text = styled.p``\n","import React from 'react'\nimport { Text } from './Notification.styles'\nimport PropTypes from 'prop-types'\n\nfunction Notification({ message }) {\n  return <Text>{message}</Text>\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n}\nexport default Notification\n","import { useState } from 'react'\nimport { Feedback } from './components/Feedback/Feedback'\nimport Statistics from './components/Statistics/Statistics'\nimport Section from './components/Section/Section'\nimport Notification from './components/Notification/Notification'\n\nfunction App() {\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  function countTotalFeedback() {\n    const totalFeedback = good + neutral + bad\n    return totalFeedback\n  }\n\n  function countPositiveFeedbackPercentage() {\n    const totalFeedback = countTotalFeedback()\n    const percentage = (good * 100) / totalFeedback\n    return Math.round(percentage)\n  }\n\n  const increaseGoodFeedback = () => {\n    setGood((s) => s + 1)\n  }\n\n  const increaseNeutralFeedback = () => {\n    setNeutral((s) => s + 1)\n  }\n\n  const increaseBadFeedback = () => {\n    setBad((s) => s + 1)\n  }\n\n  const total = countTotalFeedback()\n  const positivePercentage = countPositiveFeedbackPercentage()\n\n  return (\n    <div className=\"App\">\n      <Section title=\"Please leave feedback\">\n        <Feedback\n          increaseGoodFeedback={increaseGoodFeedback}\n          increaseNeutralFeedback={increaseNeutralFeedback}\n          increaseBadFeedback={increaseBadFeedback}\n        ></Feedback>\n      </Section>\n\n      <Section title=\"Statistics\">\n        {total ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivePercentage}\n          ></Statistics>\n        ) : (\n          <Notification message=\"No feedback given\"></Notification>\n        )}\n      </Section>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App.jsx'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}